# bot/handlers/commands.py

import httpx  # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import Router, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.filters import Command
from datetime import datetime
import logging
from config import BACKEND_URL as API_BASE_URL

bot_logger = logging.getLogger(__name__)  # –õ–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)

router = Router()


@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ JetRadar ‚Äî —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≥–∞–º–∞–Ω—Ü—ñ–≤ TON.\n"
        "–©–æ–± –¥–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å —É Watchlist, –Ω–∞–ø–∏—à–∏:\n"
        "<code>/add –ê–î–†–ï–°–ê_–ì–ê–ú–ê–ù–¶–Ø [–ú–µ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞]</code>\n"
        "–ê–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –Ω–∞—à–∏–º –≤–µ–±-–¥–æ–¥–∞—Ç–∫–æ–º –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è!",
        parse_mode="HTML",
    )


@router.message(Command("add"))
async def add_wallet_via_api(message: Message):
    args = message.text.split(maxsplit=2)  # /add ADDRESS ALIAS
    if len(args) < 2:
        await message.answer(
            "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è: <code>/add &lt;TON-–∞–¥—Ä–µ—Å–∞&gt; [–ú–µ—Ç–∫–∞]</code>", parse_mode="HTML"
        )
        return

    address = args[1].strip()
    alias = args[2].strip() if len(args) > 2 else None

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ (–æ—á–µ–Ω—å –±–∞–∑–æ–≤–∞—è)
    if not (address.startswith("UQ") or address.startswith("EQ")) or len(address) < 48:
        await message.answer("‚ùó –°—Ö–æ–∂–µ, —Ü–µ –Ω–µ–¥—ñ–π—Å–Ω–∞ –∞–¥—Ä–µ—Å–∞ TON –≥–∞–º–∞–Ω—Ü—è.", parse_mode="HTML")
        return

    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
    username = (
        message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
    )

    payload = {
        "telegram_user_id": user_id,
        "address": address,
        "alias": alias,
        "username": username,  # API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{API_BASE_URL}/wallet/add", json=payload)

            response_data = None
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–∏—à–ª–æ
                response_data = response.json()
            except Exception:
                bot_logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ API. –°—Ç–∞—Ç—É—Å: {response.status_code}. –¢–µ–ª–æ: {response.text}",
                    exc_info=True,
                )
                await message.answer(
                    f"‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–∞ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API (—Å—Ç–∞—Ç—É—Å {response.status_code}).\n"
                    f"–¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: <code>{response.text[:1000]}</code>",  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                    parse_mode="HTML",
                )
                return

            if response.status_code == 201:  # Created
                await message.answer(
                    f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å <code>{address}</code>"
                    + (
                        f" –∑ –º–µ—Ç–∫–æ—é \"{response_data.get('alias', alias)}\""
                        if response_data.get("alias", alias)
                        else ""
                    )
                    + " –¥–æ–¥–∞–Ω–æ –¥–æ —Ç–≤–æ–≥–æ Watchlist.",
                    parse_mode="HTML",
                )
            elif response.status_code == 409:  # Conflict
                await message.answer(
                    f"‚ö†Ô∏è –ì–∞–º–∞–Ω–µ—Ü—å <code>{address}</code> –≤–∂–µ —î —É —Ç–≤–æ—î–º—É Watchlist.\n–î–µ—Ç–∞–ª—ñ: {response_data.get('detail', '')}",
                    parse_mode="HTML",
                )
            else:  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç API (4xx, 5xx), –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª–∏ JSON
                error_detail = response_data.get("detail", str(response_data))  # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å 'detail'
                await message.answer(
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≥–∞–º–∞–Ω—Ü—è —á–µ—Ä–µ–∑ API ({response.status_code}):\n<code>{error_detail}</code>",
                    parse_mode="HTML",
                )

        except httpx.ConnectError as e:  # –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
            bot_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API: {str(e)}")
            await message.answer(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API ({API_BASE_URL}). –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ API —Å–µ—Ä–≤–µ—Ä —Ç–∞ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤—ñ–Ω."
            )
        except httpx.RequestError as e:  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ httpx
            bot_logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {str(e)}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {str(e)}")
        except Exception as e:
            bot_logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /add: {str(e)}", exc_info=True)
            await message.answer(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ: {str(e)}")


@router.message(Command("list"))
async def list_wallets_via_api(message: Message):
    user_id = message.from_user.id

    async with httpx.AsyncClient() as client:
        try:
            params = {"telegram_user_id": user_id}
            response = await client.get(f"{API_BASE_URL}/wallet", params=params)

            if response.status_code == 200:
                wallets_data = response.json()
                if not wallets_data:
                    await message.answer(
                        "‚ÑπÔ∏è –¢–≤—ñ–π Watchlist –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π –≥–∞–º–∞–Ω–µ—Ü—å –∫–æ–º–∞–Ω–¥–æ—é <code>/add</code>.", parse_mode="HTML"
                    )
                    return

                text_lines = ["<b>üßæ –¢–≤—ñ–π Watchlist:</b>"]
                for i, w_data in enumerate(wallets_data, 1):
                    addr_short = f"{w_data['address'][:6]}...{w_data['address'][-4:]}"
                    line = f"{i}. <code>{addr_short}</code>"
                    if w_data["alias"]:
                        line += f" ‚Äî <i>{w_data['alias']}</i>"
                    if w_data["group"]:
                        line += f" [{w_data['group']}]"
                    text_lines.append(line)
                await message.answer("\n".join(text_lines), parse_mode="HTML")
            else:
                error_detail = response.json().get("detail", response.text)
                await message.answer(
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤ ({response.status_code}):\n<code>{error_detail}</code>",
                    parse_mode="HTML",
                )
        except httpx.RequestError as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API: {str(e)}")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message(Command("tx"))
async def tx_history_via_api(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer(
            "‚ùó –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è: <code>/tx &lt;–∞–¥—Ä–µ—Å–∞&gt; [–ª—ñ–º—ñ—Ç]</code>\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>/tx EQ... 5</code>",
            parse_mode="HTML",
        )
        return

    address = parts[1]
    limit = 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ª–∏–º–∏—Ç–∞
    if len(parts) > 2 and parts[2].isdigit():
        limit = int(parts[2])
        if not (1 <= limit <= 20):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è API
            await message.answer("‚ùó –õ—ñ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 20.", parse_mode="HTML")
            return

    async with httpx.AsyncClient() as client:
        try:
            # –≠–Ω–¥–ø–æ–∏–Ω—Ç API /wallet/{address}/history —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç limit –∫–∞–∫ query –ø–∞—Ä–∞–º–µ—Ç—Ä
            api_url = f"{API_BASE_URL}/wallet/{address}/history?limit={limit}"
            resp = await client.get(api_url)

            if resp.status_code != 200:
                error_detail = resp.json().get("detail", resp.text)
                await message.answer(
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API ({resp.status_code}) –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:\n<code>{error_detail}</code>",
                    parse_mode="HTML",
                )
                return

            events_data = resp.json()
        except httpx.RequestError as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {str(e)}")
            return
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {str(e)}")
            return

    if not events_data:
        await message.answer(
            f"üì≠ –î–ª—è –≥–∞–º–∞–Ω—Ü—è <code>{address}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–∑–∞ –ª—ñ–º—ñ—Ç–æ–º {limit}).", parse_mode="HTML"
        )
        return

    text_blocks = [f"üìí –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è <code>{address}</code> (–¥–æ {limit}):"]

    for event in events_data:
        ts = event.get("timestamp", 0)
        dt_str = datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S UTC") if ts else "N/A"
        event_lines = [f"\nüóìÔ∏è {dt_str} (ID: {event.get('event_id', 'N/A')[:10]}...)"]
        if event.get("is_scam"):
            event_lines.append("üö® <b>SCAM Event!</b>")

        for action in event.get("actions", []):
            action_type = action.get("type", "UnknownType")
            status = action.get("status", "N/A")
            desc = action.get("description", "")
            line = f"‚Äî {action_type} ({status})"
            if desc:
                line += f": {desc}"

            if action_type == "TON Transfer":
                val = action.get("amount_ton", 0)
                direction = "üì§ OUT" if action.get("is_send") else "üì• IN"
                line = f"üí∏ {direction} {val:.4f} TON"
                if action.get("comment"):
                    line += f" ({action.get('comment')})"
            elif action_type == "Jetton Transfer":
                val = action.get("amount", 0)
                sym = action.get("jetton_symbol", "JTN")
                direction = "üì§ OUT" if action.get("is_send") else "üì• IN"
                line = f"ü™ô {direction} {val:.2f} {sym}"
            elif action_type == "NFT Transfer":
                name = action.get("nft_name", "NFT")
                direction = "üì§ OUT" if action.get("is_send") else "üì• IN"
                line = f"üñºÔ∏è {direction} {name}"
            elif action_type == "Swap":
                line = (
                    f"üîÑ Swap: {action.get('amount_in', 0):.2f} {action.get('asset_in')}"
                    f" ‚Üí {action.get('amount_out', 0):.2f} {action.get('asset_out')}"
                )
                if action.get("dex"):
                    line += f" via {action.get('dex')}"
            elif action_type == "JettonSwap":
                line = (
                    f"üîÑ {action.get('ton_in', 0):.2f} TON"
                    f" ‚Üí {action.get('amount_out', 0):.2f} {action.get('jetton_symbol', '')}"
                )
                if action.get("dex"):
                    line += f" via {action.get('dex')}"

            event_lines.append(f"  {line}")

        text_blocks.append("\n".join(event_lines))

    full_message = "\n".join(text_blocks)
    if len(full_message) > 4096:
        full_message = full_message[:4090] + "\n[...]"
    await message.answer(full_message, parse_mode="HTML", disable_web_page_preview=True)


@router.message(Command("summary"))
async def wallet_summary_via_api(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è: <code>/summary &lt;TON-–∞–¥—Ä–µ—Å–∞&gt;</code>", parse_mode="HTML"
        )
        return
    address = args[1].strip()

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{API_BASE_URL}/wallet/{address}/summary",
                params={"telegram_user_id": message.from_user.id},
            )

            if response.status_code == 200:
                summary = response.json()
                text = f"<b>üìä –ó–≤–µ–¥–µ–Ω–Ω—è –ø–æ –≥–∞–º–∞–Ω—Ü—é:</b> <code>{summary['address']}</code>\n"
                if summary.get("alias"):
                    text += f"<b>–ú–µ—Ç–∫–∞:</b> <i>{summary['alias']}</i>\n"
                if summary.get("group"):
                    text += f"<b>–ì—Ä—É–ø–∞:</b> [{summary['group']}]\n"
                if summary.get("balance_ton") is not None:
                    text += f"<b>–ë–∞–ª–∞–Ω—Å TON:</b> {summary['balance_ton']:.4f}üíé\n"
                if summary.get("total_tx_count") is not None:
                    text += f"<b>–í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–∑–±–µ—Ä–µ–∂–µ–Ω–æ):</b> {summary['total_tx_count']}\n"
                if summary.get("first_activity_ts"):
                    text += f"<b>–ü–µ—Ä—à–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {datetime.utcfromtimestamp(summary['first_activity_ts']).strftime('%Y-%m-%d %H:%M')}\n"
                if summary.get("last_activity_ts"):
                    text += f"<b>–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {datetime.utcfromtimestamp(summary['last_activity_ts']).strftime('%Y-%m-%d %H:%M')}\n"
                if summary.get("is_scam") is not None:
                    text += f"<b>Scam:</b> {'üî¥ –¢–∞–∫' if summary['is_scam'] else 'üü¢ –ù—ñ'}\n"
                await message.answer(text, parse_mode="HTML")
            else:
                # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–∞–∫ –≤ /add)
                error_detail = "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
                try:
                    error_detail = response.json().get("detail", response.text)
                except Exception:
                    error_detail = response.text[:200]
                await message.answer(
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–Ω—è ({response.status_code}):\n<code>{error_detail}</code>",
                    parse_mode="HTML",
                )
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ httpx –æ—à–∏–±–æ–∫)
        except httpx.ConnectError as e:
            bot_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API –¥–ª—è /summary: {str(e)}")
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API ({API_BASE_URL}).")
        except Exception as e:
            bot_logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /summary: {str(e)}", exc_info=True)
            await message.answer(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message(Command("search"))
async def search_wallets_command(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É: <code>/search &lt;—Ç–µ–∫—Å—Ç&gt;</code>", parse_mode="HTML")
        return
    query_text = args[1].strip()

    async with httpx.AsyncClient() as client:
        try:
            params = {"telegram_user_id": message.from_user.id, "query": query_text}
            response = await client.get(f"{API_BASE_URL}/wallet/wallets/search", params=params)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL

            if response.status_code == 200:
                results = response.json()
                if not results:
                    await message.answer(f'‚ÑπÔ∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º "{query_text}".')
                    return
                text = f'<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ "{query_text}":</b>\n'
                for res_wallet in results:
                    text += f"‚Ä¢ <code>{res_wallet['address']}</code>"
                    if res_wallet.get("alias"):
                        text += f" (<i>{res_wallet['alias']}</i>)"
                    if res_wallet.get("group"):
                        text += f" [{res_wallet['group']}]"
                    text += "\n"
                await message.answer(text, parse_mode="HTML")
            # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)
            else:
                error_detail = "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
                try:
                    error_detail = response.json().get("detail", response.text)
                except Exception:
                    error_detail = response.text[:200]
                await message.answer(
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É ({response.status_code}):\n<code>{error_detail}</code>", parse_mode="HTML"
                )
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ httpx –æ—à–∏–±–æ–∫)
        except httpx.ConnectError as e:
            bot_logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API –¥–ª—è /search: {str(e)}")
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API ({API_BASE_URL}).")
        except Exception as e:
            bot_logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /search: {str(e)}", exc_info=True)
            await message.answer(f"‚ùå –ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –≥—Ä–∞—Ñ–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ (–æ—Å–æ–±–µ–Ω–Ω–æ –≥—Ä–∞—Ñ).
# –≠–∫—Å–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª.
# –ì—Ä–∞—Ñ –ª—É—á—à–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ WebApp.


@router.message(Command("export"))
async def export_history_command(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùó –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É: <code>/export &lt;–∞–¥—Ä–µ—Å–∞&gt;</code>", parse_mode="HTML"
        )
        return
    address = args[1].strip()

    export_format = "csv"  # –∏–ª–∏ "json"

    api_url = f"{API_BASE_URL}/wallet/{address}/history/export?format={export_format}"
    await message.answer(
        f"–ì–æ—Ç—É—é –µ–∫—Å–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è <code>{address}</code> —É —Ñ–æ—Ä–º–∞—Ç—ñ {export_format}...\n"
        f"–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –π–æ–≥–æ –∑–∞ –ø—Ä—è–º–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º (—è–∫—â–æ API –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ):\n"
        f"{api_url}\n\n"
        f"<i>(–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É –±–æ—Ç–æ–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è.)</i>",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


@router.message(Command("graph"))
async def show_graph_command(message: Message):
    # –ö–æ–º–∞–Ω–¥–∞ /graph [–∞–¥—Ä–µ—Å] [–≥–ª—É–±–∏–Ω–∞]
    args = message.text.split()
    target_address = args[1] if len(args) > 1 else None
    # depth = args[2] if len(args) > 2 and args[2].isdigit() else 1 # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º

    web_app_url = "https://4ikkyo.github.io/JetRadar/"  # –í–ê–® URL WebApp
    graph_params = f"?telegram_user_id={message.from_user.id}"
    if target_address:
        graph_params += f"&graph_target={target_address}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üï∏Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ —É WebApp", web_app=WebAppInfo(url=f"{web_app_url}{graph_params}")
                )
            ]
        ]
    )
    await message.answer("–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≥—Ä–∞—Ñ–∞ –∑–≤'—è–∑–∫—ñ–≤, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫:", reply_markup=keyboard)


@router.message(Command("webapp"))
async def send_webapp_button(message: Message):
    web_app_url = "https://4ikkyo.github.io/JetRadar/"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—ñ–¥–∫—Ä–∏—Ç–∏ JetRadar WebApp", web_app=WebAppInfo(url=web_app_url))]
        ]
    )
    await message.answer("–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –≤–µ—Ä—Å—ñ—é JetRadar:", reply_markup=keyboard)
