// details.js
import { fetchAPI } from './api.js';
import { ui, setLoadingState } from './uiElements.js';
import { t } from './lang.js';
import { generateAndDisplayVisGraph } from './graph.js';
import { TRANSACTION_HISTORY_LIMIT } from './config.js';
import { formatTimestamp, shortenAddress, showAlert } from './utils.js';

let currentHistoryEvents = [];
let currentWalletAddressForDetails = null; // –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–º–µ–Ω
let currentTelegramUserIdForDetails = null;
let currentTgForDetails = null;
let currentFetchWatchlistCallback = null;


/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω ¬´–î–µ—Ç–∞–ª–∏ –∫–æ—à–µ–ª—å–∫–∞¬ª.
 * @param {{ address: string, alias?: string, group?: string }} wallet - –î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞.
 * @param {object} tg - –û–±—ä–µ–∫—Ç Telegram WebApp.
 * @param {string|number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Function} fetchWatchlistCallback - Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Watchlist –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 */
export async function showWalletDetails(wallet, tg, telegramUserId, fetchWatchlistCallback) {
  currentWalletAddressForDetails = wallet.address;
  // --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º telegramUserId –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
  currentTelegramUserIdForDetails = telegramUserId;
  currentTgForDetails = tg;
  currentFetchWatchlistCallback = fetchWatchlistCallback;

  ui.addWalletSection.style.display       = 'none';
  ui.watchlistSection.style.display       = 'none';
  ui.searchSection.style.display          = 'none';
  ui.walletDetailsSection.style.display   = 'block';

  window.scrollTo(0, 0);

  ui.detailsAddressSpan.textContent       = wallet.address;
  ui.summaryAliasSpan.textContent         = wallet.alias || '-';
  ui.editAliasInput.value                 = wallet.alias || '';
  ui.summaryGroupSpan.textContent         = wallet.group || '-';
  ui.editGroupInput.value                 = wallet.group || '';

  setLoadingState(ui.walletSummaryContainer, true, 'container');
  setLoadingState(ui.transactionHistoryContainer, true, 'container');
  ui.transactionHistoryUl.innerHTML = '';
  ui.visGraphContainer.innerHTML    = `<p>${t('loading_graph')}</p>`;

  tg.BackButton.show();

  // --- –ø–µ—Ä–µ–¥–∞—ë–º telegramUserId —è–≤–Ω–æ –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –≤ –∫–∞–∂–¥—ã–π fetchAPI (GET –∑–∞–ø—Ä–æ—Å—ã) ---
  const summaryPromise = fetchWalletSummary(wallet.address, telegramUserId);
  const historyPromise = fetchTransactionHistory(wallet.address, telegramUserId);
  const graphPromise   = fetchAndRenderGraph(wallet.address, telegramUserId, true);

  summaryPromise.then(summaryData => {
    setLoadingState(ui.walletSummaryContainer, false, 'container');
    if (summaryData && !summaryData.error) {
      ui.summaryBalanceSpan.textContent = summaryData.balance_ton !== null
        ? `${parseFloat(summaryData.balance_ton).toFixed(4)} TON`
        : '-';
      ui.summaryTxCountSpan.textContent  = summaryData.total_tx_count !== null
        ? String(summaryData.total_tx_count)
        : '-';
      ui.summaryActivitySpan.textContent = summaryData.last_activity_ts
        ? formatTimestamp(summaryData.last_activity_ts)
        : '-';
      ui.summaryIsScamSpan.innerHTML     = summaryData.is_scam !== null
        ? summaryData.is_scam
          ? `<span style="color:var(--tg-theme-destructive-text-color); font-weight:bold;">üî¥ ${t('yes_scam', {default: '–î–∞'})}</span>`
          : `<span style="color:green; font-weight:bold;">üü¢ ${t('no_scam', {default: '–ù–µ—Ç'})}</span>`
        : '-';
      if (summaryData.alias) ui.summaryAliasSpan.textContent = summaryData.alias;
      if (summaryData.group) ui.summaryGroupSpan.textContent = summaryData.group;
    } else {
      ui.summaryBalanceSpan.textContent = t('error_generic');
      showAlert(t('error_loading_summary', { default: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–¥–∫–∏.' }), 'error');
    }
  });

  historyPromise.then(() => {
    setLoadingState(ui.transactionHistoryContainer, false, 'container');
  });

  graphPromise.then(() => {
    // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: –≥—Ä–∞—Ñ —Å–∞–º —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ fetchAndRenderGraph
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –≤ events.js


  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏,
  // –Ω–æ –∑–¥–µ—Å—å —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∏ —Å—Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –∫–æ—à–µ–ª—å–∫–∞.
  // –§—É–Ω–∫—Ü–∏–∏ renderTransactionHistory –∏ refreshGraphFiltersAndFetchData –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å currentWalletAddressForDetails.

  // –ö–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª –¥–ª—è –º–µ—Ç–∫–∏/–≥—Ä—É–ø–ø—ã
  // ui.saveAliasGroupButton.onclick –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –≤ events.js
}

async function fetchWalletSummary(address, telegramUserId) {
    return await fetchAPI(`/wallet/${address}/summary`, 'GET', null, telegramUserId);
}


/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∏—Ö.
 */
export async function fetchTransactionHistory(address, telegramUserId) {
  ui.txLimitSpan.textContent = String(TRANSACTION_HISTORY_LIMIT);

  // --- GET –∑–∞–ø—Ä–æ—Å: telegramUserId —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ 4-–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ ---
  const result = await fetchAPI(
    `/wallet/${address}/history`,
    'GET',
    { limit: TRANSACTION_HISTORY_LIMIT },
    telegramUserId
  );

  if (result.error) {
    currentHistoryEvents = [];
    ui.transactionHistoryUl.innerHTML = `<li class="tx-empty">${t('tx_history_error')}: ${result.message}</li>`;
  } else {
    currentHistoryEvents = Array.isArray(result) ? result : [];
    if (currentHistoryEvents.length === 0) {
      ui.transactionHistoryUl.innerHTML = `<li class="tx-empty">${t('no_tx_history')}</li>`;
    }
  }
  renderTransactionHistory();
  return currentHistoryEvents;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ currentHistoryEvents –∏ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.
 */
export function renderTransactionHistory() {
  if (!ui.transactionHistoryUl) return;
  ui.transactionHistoryUl.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

  const normalizeType = (s) => (s || '').toLowerCase().replace(/[^a-z0-9]/g, '');
  const typeFilter = ui.txTypeFilter ? normalizeType(ui.txTypeFilter.value) : 'all';
  const sortDir = ui.txSortSelect && ui.txSortSelect.value === 'asc' ? 'asc' : 'desc';
  console.log('renderTransactionHistory', { typeFilter, sortDir, events: currentHistoryEvents.length });

  if (currentHistoryEvents.length === 0 && !ui.transactionHistoryContainer.classList.contains('loading-overlay')) {
      // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ fetchTransactionHistory)
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (!ui.transactionHistoryUl.querySelector('.tx-empty')) {
          ui.transactionHistoryUl.innerHTML = `<li class="tx-empty">${t('no_tx_history')}</li>`;
      }
      return;
  }


  const filteredAndSortedEvents = [...currentHistoryEvents]
    .map(event => ({
      ...event,
      // –§–∏–ª—å—Ç—Ä—É–µ–º actions –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ event –î–û —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ event'–æ–≤
      actions: event.actions.filter(act => {
        const actType = normalizeType(act.type);
        if (typeFilter === 'all') return true;
        // exact match first, then fallback to prefix for backward compatibility
        return actType === typeFilter || actType.startsWith(typeFilter);
      })
    }))
    // –£–±–∏—Ä–∞–µ–º event'—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å actions –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    .filter(event => event.actions.length > 0)
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º–∏ event'—ã
    .sort((a, b) =>
      sortDir === 'asc' ? a.timestamp - b.timestamp : b.timestamp - a.timestamp
    );

  if (filteredAndSortedEvents.length === 0 && currentHistoryEvents.length > 0) {
      ui.transactionHistoryUl.innerHTML = `<li class="tx-empty">${t('no_tx_matching_filters', {default: '–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.'})}</li>`;
      return;
  }


  filteredAndSortedEvents.forEach(evt => {
    const eventLi = document.createElement('li');
    eventLi.className = 'tx-event-card';

    const headerDiv = document.createElement('div');
    headerDiv.className = 'tx-event-header';
    headerDiv.textContent = formatTimestamp(evt.timestamp);
    eventLi.appendChild(headerDiv);

    evt.actions.forEach(action => {
      const actionDiv = document.createElement('div');
      actionDiv.className = 'tx-action-item';
      actionDiv.innerHTML = formatAction(action, currentWalletAddressForDetails); // –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥—Ä–µ—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      eventLi.appendChild(actionDiv);
    });
    ui.transactionHistoryUl.appendChild(eventLi);
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (action) –≤ HTML —Å—Ç—Ä–æ–∫—É.
 * @param {object} action - –û–±—ä–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ API.
 * @param {string} currentWalletAddr - –ê–¥—Ä–µ—Å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
 * @returns {string} HTML —Å—Ç—Ä–æ–∫–∞.
 */
function formatAction(action, currentWalletAddr) {
  let html = '';
  const type = action.type || 'Unknown';
  const senderAddr = typeof action.sender === 'string' ? action.sender : action.sender?.address;
  const recipientAddr = typeof action.recipient === 'string' ? action.recipient : action.recipient?.address;
  const isSend = senderAddr === currentWalletAddr;
  const isReceive = recipientAddr === currentWalletAddr;

  // –°—É–º–º—ã –∏ —Å–∏–º–≤–æ–ª—ã
  const amountTON = action.amount_ton ? parseFloat(action.amount_ton).toFixed(4) : null;
  const amountJettonRaw = action.amount_jetton ?? action.amount;
  const amountJetton = amountJettonRaw != null ? parseFloat(amountJettonRaw).toFixed(4) : null;
  const jettonSymbol = action.jetton_symbol || action.jetton_master?.symbol || 'JET';
  const jettonImage = action.jetton_image || action.jetton_master?.image || '';

  const fee = action.fee_ton ? parseFloat(action.fee_ton).toFixed(5) : null; // –ü—Ä–∏–º–µ—Ä
  const comment = action.comment || action.message_body?.text || ''; // –ü—Ä–∏–º–µ—Ä

  let dirEmoji = '';
  if (isSend) dirEmoji = 'üì§';
  else if (isReceive) dirEmoji = 'üì•';
  else dirEmoji = '‚öôÔ∏è'; // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –≥–¥–µ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –Ω–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)

  let description = action.description || '';
  let title = `${t(`tx_type_${type}`, {default: type})}`; // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏

  // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º
  if (type.startsWith('TonTransfer')) {
    title = t('tx_type_TonTransfer');
    description = isSend
      ? t('tx_details_ton_sent', { amount: amountTON, to: shortenAddress(recipientAddr || '?') })
      : t('tx_details_ton_received', { amount: amountTON, from: shortenAddress(senderAddr || '?') });
    if (comment) description += ` (${t('tx_comment')}: ${comment})`;
  } else if (type.startsWith('JettonTransfer')) {
    title = t('tx_type_JettonTransfer');
    description = isSend
      ? t('tx_details_jetton_sent', { amount: amountJetton, symbol: jettonSymbol, to: shortenAddress(recipientAddr || '?') })
      : t('tx_details_jetton_received', { amount: amountJetton, symbol: jettonSymbol, from: shortenAddress(senderAddr || '?') });
     if (comment) description += ` (${t('tx_comment')}: ${comment})`;
  } else if (type.startsWith('NftTransfer')) {
    title = t('tx_type_NftTransfer');
    const nftName = action.nft_name || action.nft_item?.name || 'NFT';
    description = isSend
      ? t('tx_details_nft_sent', { name: nftName, to: shortenAddress(recipientAddr || '?') })
      : t('tx_details_nft_received', { name: nftName, from: shortenAddress(senderAddr || '?') });
  } else if (type.startsWith('JettonSwap')) {
    title = t('tx_type_JettonSwap');
    const amountIn = action.ton_in != null ? parseFloat(action.ton_in).toFixed(4) : '0';
    const symbolIn = 'TON';
    const amountOut = action.amount_out != null ? parseFloat(action.amount_out).toFixed(4) : '0';
    const symbolOut = action.jetton_symbol || 'JET';
    description = t('tx_details_swap', { amountIn, symbolIn, amountOut, symbolOut });
    if (action.dex) description += ` via ${action.dex}`;
  } else {
    // –û–±—â–∏–π —Å–ª—É—á–∞–π
    if (amountTON) description += `${amountTON} TON. `;
    if (amountJetton) description += `${amountJetton} ${jettonSymbol}. `;
    if (comment) description += `(${t('tx_comment')}: ${comment})`;
  }


  html = `
    <span class="tx-emoji" title="${title}">${dirEmoji}</span>
    ${jettonImage && type.startsWith('Jetton') ? `<img src="${jettonImage}" alt="${jettonSymbol}" class="jetton-icon" />` : ''}
    <span class="tx-main-info" style="flex-grow:1;">
        <span style="font-weight:500;">${title}</span><br>
        <span class="tx-desc">${description || t('no_details')}</span>
    </span>
  `;
  if (fee) {
      html += `<span class="tx-fee" style="font-size:0.85em; color:var(--tg-theme-hint-color);">${t('tx_fee')}: ${fee} TON</span>`;
  }

  return html;
}


/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –µ–≥–æ.
 * @param {string} address - –ê–¥—Ä–µ—Å —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.
 * @param {string|number} telegramUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {boolean} [isInitialLoad=false] - –§–ª–∞–≥ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤).
 */
// --- –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ (GET-–∑–∞–ø—Ä–æ—Å) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å telegramUserId –∫–∞–∫ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ---
export async function fetchAndRenderGraph(address, telegramUserId, isInitialLoad = false) {
  ui.visGraphContainer.innerHTML = `<p>${t('loading_graph')}</p>`;

  const incoming   = ui.filterIncomingCheckbox?.checked ?? true;
  const outgoing   = ui.filterOutgoingCheckbox?.checked ?? true;
  const jettonOnly = ui.filterJettonCheckbox?.checked ?? false;
  const minValueTON= parseFloat(ui.minAmountInput?.value) || 0;

  console.log('apply graph filters', { incoming, outgoing, jettonOnly, minValueTON });
  console.log('requesting /wallet/graph', {
    target_address: address,
    incoming,
    outgoing,
    jetton_only: jettonOnly,
    min_value: minValueTON
  });

  const result = await fetchAPI(
    `/wallet/graph`,
    'GET',
    {
      target_address: address,
      incoming,
      outgoing,
      jetton_only: jettonOnly,
      min_value: minValueTON
    },
    telegramUserId
  );

  if (result.error) {
    ui.visGraphContainer.innerHTML = `<p>${t('graph_data_error', { message: result.message })}</p>`;
  } else {
    generateAndDisplayVisGraph(result, address);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥—Ä–∞—Ñ–∞.
 */
export function refreshGraphFiltersAndFetchData() {
    if (currentWalletAddressForDetails && currentTelegramUserIdForDetails) {
        console.log('refreshGraphFiltersAndFetchData click');
        setLoadingState(ui.applyGraphFiltersButton, true, 'button', t('apply_filters'));
        fetchAndRenderGraph(currentWalletAddressForDetails, currentTelegramUserIdForDetails, false)
            .finally(() => {
                setLoadingState(ui.applyGraphFiltersButton, false, 'button', t('apply_filters'));
            });
    }
}


/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –º–µ—Ç–∫—É –∏ –≥—Ä—É–ø–ø—É.
 */
export async function saveAliasAndGroup() {
  if (!currentWalletAddressForDetails || !currentTelegramUserIdForDetails) {
    showAlert(t('telegram_id_missing'), 'error');
    return;
  }
  const newAlias = ui.editAliasInput.value.trim() || null;
  const newGroup = ui.editGroupInput.value.trim() || null;

  setLoadingState(ui.saveAliasGroupButton, true, 'button', t('save'));

  // --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º payload —Å telegram_user_id ---
  const payload = {
    telegram_user_id: currentTelegramUserIdForDetails,
    alias: newAlias,
    group: newGroup
  };
  const result = await fetchAPI(
    `/wallet/${currentWalletAddressForDetails}/update`, // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π endpoint
    'PUT',
    payload,
    null
  );
  setLoadingState(ui.saveAliasGroupButton, false, 'button', t('save'));

  if (result.error) {
    showAlert(`${t('save_error', { message: result.message })}`, 'error');
  } else {
    showAlert(t('save_success'), 'success');
    // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º watchlist –∏ –¥–µ—Ç–∞–ª–∏
    currentFetchWatchlistCallback();
    // –û–±–Ω–æ–≤–∏–º UI-–ø–æ–ª—è summary:
    ui.summaryAliasSpan.textContent = newAlias || '-';
    ui.summaryGroupSpan.textContent = newGroup || '-';
  }
}

export async function deleteWalletFromDetails(address) {
  if (!currentTelegramUserIdForDetails) {
    showAlert(t('telegram_id_missing'), 'error');
    return;
  }
  const payload = {
    telegram_user_id: currentTelegramUserIdForDetails,
    address
  };
  const result = await fetchAPI(`/wallet/delete`, 'DELETE', payload, null);
  if (result.error) {
    showAlert(`${t('wallet_deleted_error')}: ${result.message}`, 'error');
  } else {
    showAlert(t('wallet_deleted_success'), 'success');
    currentFetchWatchlistCallback();
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω, —Å–∫—Ä—ã–≤–∞–µ—Ç ¬´–î–µ—Ç–∞–ª–∏¬ª.
 * @param {object} tg - –û–±—ä–µ–∫—Ç Telegram WebApp.
 */
export function showWatchlistScreen(tg) {
  ui.addWalletSection.style.display = 'block';
  ui.watchlistSection.style.display = 'block';
  ui.searchSection.style.display = 'block';
  ui.walletDetailsSection.style.display = 'none';

  tg.BackButton.hide();
  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–µ—Ç–∞–ª–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "—É—Ç–µ—á–∫–∏" —Å–æ—Å—Ç–æ—è–Ω–∏—è
  currentWalletAddressForDetails = null;
  currentTelegramUserIdForDetails = null;
  currentTgForDetails = null;
  currentFetchWatchlistCallback = null;
  currentHistoryEvents = [];
  if(ui.transactionHistoryUl) ui.transactionHistoryUl.innerHTML = '';
  if(ui.visGraphContainer) ui.visGraphContainer.innerHTML = '';

}
